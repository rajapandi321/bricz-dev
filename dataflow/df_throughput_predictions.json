{
	"name": "df_throughput_predictions",
	"properties": {
		"folder": {
			"name": "main"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "THROUGHPUT_PREDICTIONS_RAW",
						"type": "DatasetReference"
					},
					"name": "throughtputoutput"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "TenantHeirarchyTable"
				},
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "LocationsTable"
				},
				{
					"dataset": {
						"referenceName": "enum_types",
						"type": "DatasetReference"
					},
					"name": "EnumTypeDB"
				},
				{
					"dataset": {
						"referenceName": "enum_values",
						"type": "DatasetReference"
					},
					"name": "EnumValue"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "operational_calendar",
						"type": "DatasetReference"
					},
					"name": "WriteToDatabase"
				}
			],
			"transformations": [
				{
					"name": "SelectedColsThroughput"
				},
				{
					"name": "DeriveAttributes"
				},
				{
					"name": "THTSelected"
				},
				{
					"name": "JoinTHT"
				},
				{
					"name": "FinalSelectThroughputPredictions"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "LocationsSelected"
				},
				{
					"name": "JoinLocationsTable"
				},
				{
					"name": "JoinEnumLocationMetricType"
				},
				{
					"name": "FilterEnumLocationMetricType"
				},
				{
					"name": "JoinLocationMetricTypeEnum"
				},
				{
					"name": "FilterBURecords"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          date as date,",
				"          unit_volume as string,",
				"          capacity as string,",
				"          picker_capacity as string,",
				"          packer_capacity as string,",
				"          total_work_hours as string,",
				"          inventory_level as string,",
				"          throughput_preds as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     rowUrlColumn: 'file_name',",
				"     mode: 'read') ~> throughtputoutput",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TenantHeirarchyTable",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as decimal(0,0),",
				"          latitude as decimal(0,0),",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LocationsTable",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EnumTypeDB",
				"source(output(",
				"          id as integer,",
				"          enum_type_id as integer,",
				"          value_id as integer,",
				"          value as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EnumValue",
				"throughtputoutput select(mapColumn(",
				"          date,",
				"          throughput_preds,",
				"          file_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectedColsThroughput",
				"SelectedColsThroughput derive(location_code = split(split(file_name,'/')[4],'_')[2],",
				"          business_unit_name = split(split(file_name,'/')[4],'_')[1],",
				"          location_metric_type = \"Throughput\") ~> DeriveAttributes",
				"FilterBURecords select(mapColumn(",
				"          id,",
				"          name,",
				"          tenant_id,",
				"          parent_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> THTSelected",
				"DeriveAttributes, THTSelected join(business_unit_name == name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTHT",
				"JoinLocationMetricTypeEnum select(mapColumn(",
				"          location_id,",
				"          business_unit_id = THTSelected@id,",
				"          organization_id = parent_id,",
				"          date,",
				"          location_metric_value = throughput_preds,",
				"          location_metric_type_id = value_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelectThroughputPredictions",
				"FinalSelectThroughputPredictions alterRow(upsertIf(true())) ~> AlterRow1",
				"LocationsTable select(mapColumn(",
				"          location_id = id,",
				"          location_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LocationsSelected",
				"JoinTHT, LocationsSelected join(DeriveAttributes@location_code == LocationsSelected@location_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocationsTable",
				"FilterEnumLocationMetricType, EnumValue join(EnumTypeDB@id == enum_type_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinEnumLocationMetricType",
				"EnumTypeDB filter(name=='location_metric_type') ~> FilterEnumLocationMetricType",
				"JoinLocationsTable, JoinEnumLocationMetricType join(location_metric_type == value,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocationMetricTypeEnum",
				"TenantHeirarchyTable filter(tenant_hierarchy_type==3) ~> FilterBURecords",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          business_unit_id as string,",
				"          organization_id as string,",
				"          location_id as integer,",
				"          date as date,",
				"          location_metric_value as decimal(0,0),",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          enum_value_id as integer,",
				"          enum_type_id as integer,",
				"          operational_profile_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['location_id','date','location_metric_type_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          business_unit_id,",
				"          organization_id,",
				"          location_id,",
				"          date,",
				"          location_metric_value,",
				"          location_metric_type_id",
				"     )) ~> WriteToDatabase"
			]
		}
	}
}