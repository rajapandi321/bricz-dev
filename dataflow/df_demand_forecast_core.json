{
	"name": "df_demand_forecast_core",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DEMAND_FORECAST_RAW",
						"type": "DatasetReference"
					},
					"name": "demandforecastraw"
				},
				{
					"dataset": {
						"referenceName": "item",
						"type": "DatasetReference"
					},
					"name": "item"
				},
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "locations"
				},
				{
					"dataset": {
						"referenceName": "micro_area",
						"type": "DatasetReference"
					},
					"name": "microarea"
				},
				{
					"dataset": {
						"referenceName": "customertypes",
						"type": "DatasetReference"
					},
					"name": "customertype"
				},
				{
					"dataset": {
						"referenceName": "fulfillment_services",
						"type": "DatasetReference"
					},
					"name": "fulfillmentservices"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "tenantheirarchydetail"
				},
				{
					"dataset": {
						"referenceName": "importhistory",
						"type": "DatasetReference"
					},
					"name": "importhistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "forecast",
						"type": "DatasetReference"
					},
					"name": "forecast"
				}
			],
			"transformations": [
				{
					"name": "derivebu"
				},
				{
					"name": "joinitems"
				},
				{
					"name": "selectitems"
				},
				{
					"name": "selectlocations"
				},
				{
					"name": "selectmicroarea"
				},
				{
					"name": "selectcustomertype"
				},
				{
					"name": "selectfulfillmentservicetype"
				},
				{
					"name": "joinlocations"
				},
				{
					"name": "joinmicroarea"
				},
				{
					"name": "joincustomertypes"
				},
				{
					"name": "joinfulfillmentservice"
				},
				{
					"name": "jointhtd"
				},
				{
					"name": "selectTHTD"
				},
				{
					"name": "filterbu"
				},
				{
					"name": "selectimporthistory"
				},
				{
					"name": "joinimporthistory"
				},
				{
					"name": "derivebuandorg"
				},
				{
					"name": "filtertransaction"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_path as string ('/DEV/Upload/DemandForecast/10.txt'),",
				"     mode as string ('UX-Upload'),",
				"     transaction_id as string ('10')",
				"}",
				"source(output(",
				"          {Item ID*} as string,",
				"          {Area ID (3 Digit Zip Code)*} as string,",
				"          {Customer Type} as string,",
				"          {Fulfillment Service*} as string,",
				"          {Forecast Start Date*} as date 'yyyy-MM-dd',",
				"          {Forecast End Date*} as date 'yyyy-MM-dd',",
				"          {Low Demand Quantity} as string,",
				"          {Consensus Demand Quantity} as string,",
				"          {High Demand Quantity} as string,",
				"          {Fulfillment Location ID} as string,",
				"          {Fixed Fulfillment} as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'file_name',",
				"     wildcardPaths:[($file_path)]) ~> demandforecastraw",
				"source(output(",
				"          id as integer,",
				"          item_code as string,",
				"          description as string,",
				"          short_description as string,",
				"          department as string,",
				"          sub_department as string,",
				"          class as string,",
				"          sub_class as string,",
				"          style as string,",
				"          color as string,",
				"          size as string,",
				"          size_second as string,",
				"          sku_lifecycle_status as integer,",
				"          product_division as string,",
				"          product_family as string,",
				"          measurement_unit as string,",
				"          unit_cost as float,",
				"          unit_volume as float,",
				"          unit_weight as float,",
				"          unit_cube as float,",
				"          units_per_pallet as float,",
				"          uom_conversion_factor as float,",
				"          distribution_channel as string,",
				"          item_handling_type as string,",
				"          item_unit_price as float,",
				"          minimum_sales_qty as float,",
				"          birth_year as short,",
				"          birth_month as short,",
				"          expiration_year as short,",
				"          expiration_month as short,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> item",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as decimal(0,0),",
				"          latitude as decimal(0,0),",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locations",
				"source(output(",
				"          id as integer,",
				"          micro_area_code as string,",
				"          description as string,",
				"          primary_fulfillment_location as integer,",
				"          attribute_1 as string,",
				"          attribute_2 as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> microarea",
				"source(output(",
				"          id as integer,",
				"          customer_type_code as string,",
				"          type as string,",
				"          description as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> customertype",
				"source(output(",
				"          id as integer,",
				"          fulfillment_service_code as string,",
				"          service_name as string,",
				"          service_type as string,",
				"          delivery_speed_value as float,",
				"          delivery_speed_unit as string,",
				"          service_radius_value as float,",
				"          service_radius_unit as string,",
				"          service_charge as float,",
				"          deployment_type as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> fulfillmentservices",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tenantheirarchydetail",
				"source(output(",
				"          id as integer,",
				"          original_file_name as string,",
				"          user_id as string,",
				"          status_enum_value_id as integer,",
				"          processed_time as timestamp,",
				"          errors as string,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> importhistory",
				"demandforecastraw derive(business_unit_name = split(split($file_path,\"/\")[5],'_')[1],",
				"          fixed_fulfillment = 12,",
				"          transaction_id = iif($mode=='UX-Upload', toInteger(split(split($file_path,'/')[5],'.')[1]), 0)) ~> derivebu",
				"derivebuandorg, selectitems join({Item ID*} == item_code",
				"     && derivebuandorg@business_unit_id == selectitems@business_unit_id",
				"     && derivebuandorg@organization_id == selectitems@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinitems",
				"item select(mapColumn(",
				"          item_id = id,",
				"          item_code,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectitems",
				"locations select(mapColumn(",
				"          fulfillment_location = id,",
				"          location_code,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocations",
				"microarea select(mapColumn(",
				"          area_id = id,",
				"          micro_area_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectmicroarea",
				"customertype select(mapColumn(",
				"          customer_type = id,",
				"          customer_type_code = type,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcustomertype",
				"fulfillmentservices select(mapColumn(",
				"          fulfillment_service = id,",
				"          service_name,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfulfillmentservicetype",
				"joinitems, selectlocations join({Fulfillment Location ID} == location_code",
				"     && derivebuandorg@business_unit_id == selectlocations@business_unit_id",
				"     && derivebuandorg@organization_id == selectlocations@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinlocations",
				"joinlocations, selectmicroarea join({Area ID (3 Digit Zip Code)*} == micro_area_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinmicroarea",
				"joinmicroarea, selectcustomertype join({Customer Type} == customer_type_code",
				"     && derivebuandorg@business_unit_id == selectcustomertype@business_unit_id",
				"     && derivebuandorg@organization_id == selectcustomertype@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joincustomertypes",
				"joincustomertypes, selectfulfillmentservicetype join({Fulfillment Service*} == service_name",
				"     && derivebuandorg@business_unit_id == selectfulfillmentservicetype@business_unit_id",
				"     && derivebuandorg@organization_id == selectfulfillmentservicetype@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinfulfillmentservice",
				"derivebu, selectTHTD join(business_unit_name == bu_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> jointhtd",
				"filterbu select(mapColumn(",
				"          ftp_bu_id = id,",
				"          bu_name = name,",
				"          tenant_id,",
				"          ftp_organization_id = parent_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTHTD",
				"tenantheirarchydetail filter(tenant_hierarchy_type==3) ~> filterbu",
				"filtertransaction select(mapColumn(",
				"          ih_id = id,",
				"          ih_business_unit_id = business_unit_id,",
				"          ih_organization_id = organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectimporthistory",
				"jointhtd, selectimporthistory join(transaction_id == ih_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinimporthistory",
				"joinimporthistory derive(business_unit_id = iif($mode=='UX-Upload',ih_business_unit_id,ftp_bu_id),",
				"          organization_id = iif($mode=='UX-Upload',ih_organization_id,ftp_organization_id),",
				"          area_hierarchy_id = 1) ~> derivebuandorg",
				"importhistory filter(id == toInteger($transaction_id)) ~> filtertransaction",
				"joinfulfillmentservice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          item_id as integer,",
				"          area_id as integer,",
				"          customer_type as integer,",
				"          fulfillment_service as integer,",
				"          forecast_start_date as timestamp,",
				"          forecast_end_date as timestamp,",
				"          fulfillment_location as integer,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          low_demand_quantity as integer,",
				"          consensus_demand_quantity as integer,",
				"          high_demand_quantity as integer,",
				"          fixed_fulfillment as boolean,",
				"          area_hierarchy_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     postSQLs:['\\n'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          item_id,",
				"          area_id,",
				"          customer_type,",
				"          fulfillment_service,",
				"          forecast_start_date = {Forecast Start Date*},",
				"          forecast_end_date = {Forecast End Date*},",
				"          fulfillment_location,",
				"          organization_id,",
				"          business_unit_id,",
				"          low_demand_quantity = {Low Demand Quantity},",
				"          consensus_demand_quantity = {Consensus Demand Quantity},",
				"          high_demand_quantity = {High Demand Quantity},",
				"          fixed_fulfillment,",
				"          area_hierarchy_id",
				"     )) ~> forecast"
			]
		}
	}
}