{
	"name": "df_locations_ux",
	"properties": {
		"folder": {
			"name": "IMPORT_MANAGER_MERGED"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "FetchingLocations"
				},
				{
					"dataset": {
						"referenceName": "importhistory",
						"type": "DatasetReference"
					},
					"name": "importHistory"
				},
				{
					"dataset": {
						"referenceName": "LOCATION_UX_STAGING",
						"type": "DatasetReference"
					},
					"name": "ExcelSource"
				},
				{
					"dataset": {
						"referenceName": "location_type",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "fetchingtenentdetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "loadlocationsdatadb"
				},
				{
					"dataset": {
						"referenceName": "FailedRowsLocation",
						"type": "DatasetReference"
					},
					"name": "failedrows"
				}
			],
			"transformations": [
				{
					"name": "FilteringHistory"
				},
				{
					"name": "selectingImportHistory"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "selectLocations"
				},
				{
					"name": "AddingRecordID"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "assert1"
				},
				{
					"name": "storingErrorRecords"
				},
				{
					"name": "joiningwithErrors"
				},
				{
					"name": "select3"
				},
				{
					"name": "aggregateErrors"
				},
				{
					"name": "split1"
				},
				{
					"name": "selectingFailedRows"
				},
				{
					"name": "duplicateddata"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "window1"
				},
				{
					"name": "SelectingUniqueLocations"
				},
				{
					"name": "selectinglocationtypes"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join4"
				},
				{
					"name": "mergingtenantdetails"
				},
				{
					"name": "changingcolumntypes"
				},
				{
					"name": "join5"
				}
			],
			"scriptLines": [
				"parameters{",
				"     transaction_id as string ('192'),",
				"     file_path as string ('/DEV/Upload/Location/192.xlsx')",
				"}",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as double,",
				"          latitude as double,",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          units_per_hour as float,",
				"          max_fte_regular_hours as float,",
				"          min_fte_regular_hours as float,",
				"          max_temp_regular_hours as float,",
				"          min_temp_regular_hours as float,",
				"          max_fte_overtime_hours as float,",
				"          max_temp_overtime_hours as float,",
				"          regular_fte_wage as float,",
				"          regular_temp_wage as float,",
				"          overtime_fte_wage as float,",
				"          overtime_temp_wage as float,",
				"          fte_staff_count as integer,",
				"          temp_staff_count as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> FetchingLocations",
				"source(output(",
				"          id as integer,",
				"          original_file_name as string,",
				"          user_id as string,",
				"          status_enum_value_id as integer,",
				"          processed_time as timestamp,",
				"          errors as string,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> importHistory",
				"source(output(",
				"          {Location ID*} as string,",
				"          {Location Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Country as string,",
				"          Longitude as string,",
				"          Latitude as string,",
				"          {Location Status} as string,",
				"          {Location Type} as string,",
				"          {Daily Throughput} as string,",
				"          {Storage Capacity} as string,",
				"          {Inbound Handling Cost} as string,",
				"          {Outbound Handling Cost} as string,",
				"          {Inbound Processing Time} as string,",
				"          {Outbound Processing Time} as string,",
				"          {Transfer Inbound Processing Time} as string,",
				"          {Transfer Outbound Processing Time} as string,",
				"          {Transfer Inbound Handling Cost} as string,",
				"          {Transfer Outbound Handling Cost} as string,",
				"          {Units per Hour} as string,",
				"          {Max FTE Regular Hours} as string,",
				"          {Min FTE Regular Hours} as string,",
				"          {Max Temp Regular Hours} as string,",
				"          {Min Temp Regular Hours} as string,",
				"          {Max FTE Overtime Hours} as string,",
				"          {Regular FTE Wage} as string,",
				"          {Regular Temp Wage} as string,",
				"          {Overtime FTE Wage} as string,",
				"          {Overtime Temp Wage} as string,",
				"          {FTE Staff Count} as string,",
				"          {Temp Staff Count} as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'filename',",
				"     wildcardPaths:[($file_path)]) ~> ExcelSource",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          description as string,",
				"          created_date as date,",
				"          updated_date as date,",
				"          display_icon as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string,",
				"          tenant_hierarchy_code as string,",
				"          isdeleted as boolean,",
				"          updated_by_user_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> fetchingtenentdetails",
				"join4 filter(importHistory@id == toInteger($transaction_id)) ~> FilteringHistory",
				"FilteringHistory select(mapColumn(",
				"          import_id = importHistory@id,",
				"          business_unit_id,",
				"          organization_id,",
				"          tenant_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingImportHistory",
				"FetchingLocations derive(presence = 'true') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          location_id = id,",
				"          location_code,",
				"          presence,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectLocations",
				"ExcelSource keyGenerate(output(record_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddingRecordID",
				"AddingRecordID derive(numericalintegrity = iif(isNull({Daily Throughput}),true(),not(isNull(toFloat({Daily Throughput})))) && iif(isNull({Storage Capacity}),true(),not(isNull(toFloat({Storage Capacity})))) && iif(isNull({Inbound Handling Cost}),true(),not(isNull(toFloat({Inbound Handling Cost})))) && iif(isNull({Outbound Handling Cost}),true(),not(isNull(toFloat({Outbound Handling Cost})))) && iif(isNull({Transfer Inbound Handling Cost}),true(),not(isNull(toFloat({Transfer Inbound Handling Cost})))) && iif(isNull({Transfer Outbound Handling Cost}),true(),not(isNull(toFloat({Transfer Outbound Handling Cost})))) && iif(isNull({Units per Hour}),true(),not(isNull(toFloat({Units per Hour})))) && iif(isNull({Min FTE Regular Hours}),true(),not(isNull(toFloat({Min FTE Regular Hours})))) && iif(isNull({Max FTE Regular Hours}),true(),not(isNull(toFloat({Max FTE Regular Hours})))) && iif(isNull({Min Temp Regular Hours}),true(),not(isNull(toFloat({Min Temp Regular Hours})))) && iif(isNull({Max Temp Regular Hours}),true(),not(isNull(toFloat({Max Temp Regular Hours})))) && iif(isNull({Max FTE Overtime Hours}),true(),not(isNull(toFloat({Max FTE Overtime Hours})))) && iif(isNull({Regular FTE Wage}),true(),not(isNull(toFloat({Regular FTE Wage})))) && iif(isNull({Regular Temp Wage}),true(),not(isNull(toFloat({Regular Temp Wage})))) && iif(isNull({Overtime FTE Wage}),true(),not(isNull(toFloat({Overtime FTE Wage})))) && iif(isNull({Overtime Temp Wage}),true(),not(isNull(toFloat({Overtime Temp Wage})))) && iif(isNull({FTE Staff Count}),true(),not(isNull(toFloat({FTE Staff Count})))) && iif(isNull({Temp Staff Count}),true(),not(isNull(toFloat({Temp Staff Count})))),",
				"          transaction_id = toInteger($transaction_id)) ~> derivedColumn2",
				"duplicateddata, SelectingUniqueLocations join({Location ID*} == location_code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join5 select(mapColumn(",
				"          Location_Code_SC = {Location ID*},",
				"          Location_Name_SC = {Location Name},",
				"          Address_SC = Address,",
				"          City_SC = City,",
				"          State_SC = State,",
				"          Zip_SC = Zip,",
				"          Country_SC = Country,",
				"          Longitude_SC = Longitude,",
				"          Latitude_SC = Latitude,",
				"          Location_Status_SC = {Location Status},",
				"          Location_Type_SC = {Location Type},",
				"          Daily_Throughput_SC = {Daily Throughput},",
				"          Storage_Capacity_SC = {Storage Capacity},",
				"          Inbound_Handling_Cost_SC = {Inbound Handling Cost},",
				"          Outbound_Handling_Cost_SC = {Outbound Handling Cost},",
				"          Inbound_Processing_Time_SC = {Inbound Processing Time},",
				"          Outbound_Processing_Time_SC = {Outbound Processing Time},",
				"          Transfer_Inbound_Processing_Time_SC = {Transfer Inbound Processing Time},",
				"          Transfer_Outbound_Processing_Time_SC = {Transfer Outbound Processing Time},",
				"          Transfer_Inbound_Handling_Cost_SC = {Transfer Inbound Handling Cost},",
				"          Transfer_Outbound_Handling_Cost_SC = {Transfer Outbound Handling Cost},",
				"          Units_per_Hour_SC = {Units per Hour},",
				"          Max_FTE_Regular_Hours_SC = {Max FTE Regular Hours},",
				"          Min_FTE_Regular_Hours_SC = {Min FTE Regular Hours},",
				"          Max_Temp_Regular_Hours_SC = {Max Temp Regular Hours},",
				"          Min_Temp_Regular_Hours_SC = {Min Temp Regular Hours},",
				"          Max_FTE_Overtime_Hours_SC = {Max FTE Overtime Hours},",
				"          Regular_FTE_Wage_SC = {Regular FTE Wage},",
				"          Regular_Temp_Wage_SC = {Regular Temp Wage},",
				"          Overtime_FTE_Wage_SC = {Overtime FTE Wage},",
				"          Overtime_Temp_Wage_SC = {Overtime Temp Wage},",
				"          FTE_Staff_Count_SC = {FTE Staff Count},",
				"          Temp_Staff_Count_SC = {Temp Staff Count},",
				"          record_id,",
				"          nonduplicate,",
				"          numericalintegrity,",
				"          location_id,",
				"          presence,",
				"          filename,",
				"          tenant_id,",
				"          organization_id,",
				"          business_unit_id,",
				"          location_type_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"filter1, selectLocations, selectinglocationtypes assert(expectTrue(isNull(select2@presence), false, 'checkrecordexists', null, 'Record Already Exists In DB'),",
				"     expectExists(Location_Type_SC == location_type_name, false, 'checklocationtype', null, 'Location Type Not Found'),",
				"     expectTrue(numericalintegrity, false, 'numericalintegrity', null, 'Numerical fields contain non numeric values'),",
				"     expectTrue(nonduplicate, false, 'nonduplicate', null, 'Duplicate Values Not Found')) ~> assert1",
				"assert1 derive(transaction_id = $transaction_id,",
				"          validation_errors = assertErrorMessages(),",
				"          failed_file_name = replace(replace($file_path,'.xlsx','.json'),'/Upload','/FailedTransactions')) ~> storingErrorRecords",
				"storingErrorRecords, aggregateErrors join(select2@filename == aggregateErrors@filename,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningwithErrors",
				"storingErrorRecords select(mapColumn(",
				"          validation_errors,",
				"          filename",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 aggregate(groupBy(filename),",
				"     error_count = countIf(not(isNull(validation_errors)))) ~> aggregateErrors",
				"joiningwithErrors split(error_count==0,",
				"     disjoint: false) ~> split1@(validrows, invalidrows)",
				"split1@invalidrows select(mapColumn(",
				"          filename = split1@invalidrows@filename,",
				"          validation_errors,",
				"          failed_file_name,",
				"          record_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingFailedRows",
				"derivedColumn2 window(over({Location ID*}),",
				"     asc(record_id, true),",
				"     nonduplicate = rowNumber() == 1) ~> duplicateddata",
				"selectingFailedRows derive(failed_file_name = replace(replace($file_path,'.xlsx','.json'),'/Upload','/FailedTransactions'),",
				"          type = 'error',",
				"          message = concat('record number ',toString(record_id),' has following errors ',toString(validation_errors))) ~> derivedColumn3",
				"selectLocations window(over(location_code),",
				"     asc(location_id, true),",
				"     duplicate_data = rowNumber() == 1) ~> window1",
				"window1 filter(duplicate_data == true()) ~> SelectingUniqueLocations",
				"source1 select(mapColumn(",
				"          location_type_id = id,",
				"          location_type_name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectinglocationtypes",
				"select2 filter(not(isNull(Location_Code_SC)) || ",
				"not(isNull(Location_Name_SC)) || ",
				"not(isNull(Address_SC)) || ",
				"not(isNull(City_SC)) || ",
				"not(isNull(State_SC)) || ",
				"not(isNull(Zip_SC)) || ",
				"not(isNull(Longitude_SC)) || ",
				"not(isNull(Latitude_SC)) || ",
				"not(isNull(Location_Status_SC)) || ",
				"not(isNull(Location_Type_SC)) || ",
				"not(isNull(Daily_Throughput_SC)) || ",
				"not(isNull(Storage_Capacity_SC)) || ",
				"not(isNull(Inbound_Handling_Cost_SC)) || ",
				"not(isNull(Outbound_Handling_Cost_SC)) || ",
				"not(isNull(Inbound_Processing_Time_SC)) || ",
				"not(isNull(Outbound_Processing_Time_SC)) || ",
				"not(isNull(Transfer_Inbound_Processing_Time_SC)) || ",
				"not(isNull(Transfer_Outbound_Processing_Time_SC)) || ",
				"not(isNull(Transfer_Inbound_Handling_Cost_SC)) || ",
				"not(isNull(Units_per_Hour_SC)) || ",
				"not(isNull(Max_FTE_Regular_Hours_SC)) || ",
				"not(isNull(Min_FTE_Regular_Hours_SC)) || ",
				"not(isNull(Max_Temp_Regular_Hours_SC)) || ",
				"not(isNull(Min_Temp_Regular_Hours_SC)) || ",
				"not(isNull(Max_FTE_Overtime_Hours_SC)) || ",
				"not(isNull(Regular_FTE_Wage_SC)) || ",
				"not(isNull(Regular_Temp_Wage_SC)) || ",
				"not(isNull(Overtime_FTE_Wage_SC)) || ",
				"not(isNull(Overtime_Temp_Wage_SC)) || ",
				"not(isNull(FTE_Staff_Count_SC)) || ",
				"not(isNull(Temp_Staff_Count_SC))) ~> filter1",
				"importHistory, fetchingtenentdetails join(business_unit_id == fetchingtenentdetails@id",
				"     && organization_id == parent_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join2, selectingImportHistory join(transaction_id == import_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergingtenantdetails",
				"split1@validrows derive(latitude = coalesce(toInteger(Latitude_SC), 0),",
				"          longitude = coalesce(toInteger(Longitude_SC), 0),",
				"          Daily_Throughput_SC = toFloat(Daily_Throughput_SC),",
				"          Storage_Capacity_SC = toFloat(Storage_Capacity_SC),",
				"          Inbound_Handling_Cost_SC = toFloat(Inbound_Handling_Cost_SC),",
				"          Outbound_Handling_Cost_SC = toFloat(Outbound_Handling_Cost_SC),",
				"          Inbound_Processing_Time_SC = toDouble(Inbound_Processing_Time_SC),",
				"          Outbound_Processing_Time_SC = toDouble(Outbound_Processing_Time_SC),",
				"          Transfer_Inbound_Processing_Time_SC = toDouble(Transfer_Inbound_Processing_Time_SC),",
				"          Transfer_Outbound_Processing_Time_SC = toDouble(Transfer_Outbound_Processing_Time_SC),",
				"          Transfer_Inbound_Handling_Cost_SC = toDouble(Transfer_Inbound_Handling_Cost_SC),",
				"          Transfer_Outbound_Handling_Cost_SC = toDouble(Transfer_Outbound_Handling_Cost_SC),",
				"          Units_per_Hour_SC = toFloat(Units_per_Hour_SC),",
				"          Max_FTE_Regular_Hours_SC = toFloat(Max_FTE_Regular_Hours_SC),",
				"          Min_FTE_Regular_Hours_SC = toFloat(Min_FTE_Regular_Hours_SC),",
				"          Max_Temp_Regular_Hours_SC = toFloat(Max_Temp_Regular_Hours_SC),",
				"          Min_Temp_Regular_Hours_SC = toFloat(Min_Temp_Regular_Hours_SC),",
				"          Max_FTE_Overtime_Hours_SC = toFloat(Max_FTE_Overtime_Hours_SC),",
				"          Regular_FTE_Wage_SC = toFloat(Regular_FTE_Wage_SC),",
				"          Regular_Temp_Wage_SC = toFloat(Regular_Temp_Wage_SC),",
				"          Overtime_FTE_Wage_SC = toFloat(Overtime_FTE_Wage_SC),",
				"          FTE_Staff_Count_SC = toFloat(FTE_Staff_Count_SC),",
				"          Overtime_Temp_Wage_SC = toFloat(Overtime_Temp_Wage_SC),",
				"          Temp_Staff_Count_SC = toFloat(Temp_Staff_Count_SC)) ~> changingcolumntypes",
				"mergingtenantdetails, selectinglocationtypes join({Location Type} == location_type_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"changingcolumntypes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as double,",
				"          latitude as double,",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          units_per_hour as float,",
				"          max_fte_regular_hours as float,",
				"          min_fte_regular_hours as float,",
				"          max_temp_regular_hours as float,",
				"          min_temp_regular_hours as float,",
				"          max_fte_overtime_hours as float,",
				"          max_temp_overtime_hours as float,",
				"          regular_fte_wage as float,",
				"          regular_temp_wage as float,",
				"          overtime_fte_wage as float,",
				"          overtime_temp_wage as float,",
				"          fte_staff_count as integer,",
				"          temp_staff_count as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          location_code = Location_Code_SC,",
				"          name = Location_Name_SC,",
				"          address = Address_SC,",
				"          city = City_SC,",
				"          state = State_SC,",
				"          zip = Zip_SC,",
				"          country = Country_SC,",
				"          throughput = Daily_Throughput_SC,",
				"          capacity = Storage_Capacity_SC,",
				"          inbound_handling_cost = Inbound_Handling_Cost_SC,",
				"          outbound_handling_cost = Outbound_Handling_Cost_SC,",
				"          longitude,",
				"          latitude,",
				"          status = Location_Status_SC,",
				"          inbound_processing_time = Inbound_Processing_Time_SC,",
				"          outbound_processing_time = Outbound_Processing_Time_SC,",
				"          type = split1@validrows@location_type_id,",
				"          transfer_inbound_processing_time = Transfer_Inbound_Processing_Time_SC,",
				"          transfer_outbound_processing_time = Transfer_Outbound_Processing_Time_SC,",
				"          transfer_inbound_handling_cost = Transfer_Inbound_Handling_Cost_SC,",
				"          transfer_outbound_handling_cost = Transfer_Outbound_Handling_Cost_SC,",
				"          tenant_id,",
				"          organization_id,",
				"          business_unit_id,",
				"          units_per_hour = Units_per_Hour_SC,",
				"          max_fte_regular_hours = Max_FTE_Regular_Hours_SC,",
				"          min_fte_regular_hours = Min_FTE_Regular_Hours_SC,",
				"          max_temp_regular_hours = Max_Temp_Regular_Hours_SC,",
				"          min_temp_regular_hours = Min_Temp_Regular_Hours_SC,",
				"          max_fte_overtime_hours = Max_FTE_Overtime_Hours_SC,",
				"          regular_fte_wage = Regular_FTE_Wage_SC,",
				"          regular_temp_wage = Regular_Temp_Wage_SC,",
				"          overtime_fte_wage = Overtime_FTE_Wage_SC,",
				"          overtime_temp_wage = Overtime_Temp_Wage_SC,",
				"          fte_staff_count = FTE_Staff_Count_SC,",
				"          temp_staff_count = Temp_Staff_Count_SC",
				"     )) ~> loadlocationsdatadb",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowUrlColumn:'failed_file_name',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          type,",
				"          message",
				"     )) ~> failedrows"
			]
		}
	}
}