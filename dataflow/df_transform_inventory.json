{
	"name": "df_transform_inventory",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "INVENTORY_MAIN_UX",
						"type": "DatasetReference"
					},
					"name": "inventorymain",
					"description": "inventory main"
				},
				{
					"dataset": {
						"referenceName": "importhistory",
						"type": "DatasetReference"
					},
					"name": "importhistory"
				},
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "locations"
				},
				{
					"dataset": {
						"referenceName": "item",
						"type": "DatasetReference"
					},
					"name": "item"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "tenantheirarchydetail"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "inventory",
						"type": "DatasetReference"
					},
					"name": "sinkinventory"
				}
			],
			"transformations": [
				{
					"name": "derivecolumns"
				},
				{
					"name": "selectimporthistory"
				},
				{
					"name": "joinimporthistory"
				},
				{
					"name": "joinlocations"
				},
				{
					"name": "selectlocations"
				},
				{
					"name": "itemselect"
				},
				{
					"name": "joinitem",
					"description": "Inner join on 'joinlocations' and 'item'"
				},
				{
					"name": "jointhtd"
				},
				{
					"name": "filterburecords"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_path as string ('/DEV/Upload/Inventory/211.txt'),",
				"     transaction_id as string ('211')",
				"}",
				"source(output(",
				"          {Item ID} as string,",
				"          {Location ID} as string,",
				"          {Stock Date} as date,",
				"          {Stock Quantity} as float,",
				"          {Reserved Quantity} as float,",
				"          {Available Quantity} as float,",
				"          {On Order ID} as string,",
				"          {On Order Due Date} as date,",
				"          {On Order Supplier Shipping Date} as date,",
				"          {On Order Promised Delivery Date} as date",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'file_name',",
				"     wildcardPaths:[($file_path)]) ~> inventorymain",
				"source(output(",
				"          id as integer,",
				"          original_file_name as string,",
				"          user_id as string,",
				"          status_enum_value_id as integer,",
				"          processed_time as timestamp,",
				"          errors as string,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> importhistory",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as decimal(0,0),",
				"          latitude as decimal(0,0),",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locations",
				"source(output(",
				"          id as integer,",
				"          item_code as string,",
				"          description as string,",
				"          short_description as string,",
				"          department as string,",
				"          sub_department as string,",
				"          class as string,",
				"          sub_class as string,",
				"          style as string,",
				"          color as string,",
				"          size as string,",
				"          size_second as string,",
				"          sku_lifecycle_status as integer,",
				"          product_division as string,",
				"          product_family as string,",
				"          measurement_unit as string,",
				"          unit_cost as float,",
				"          unit_volume as float,",
				"          unit_weight as float,",
				"          unit_cube as float,",
				"          units_per_pallet as float,",
				"          uom_conversion_factor as float,",
				"          distribution_channel as string,",
				"          item_handling_type as string,",
				"          item_unit_price as float,",
				"          minimum_sales_qty as float,",
				"          birth_year as short,",
				"          birth_month as short,",
				"          expiration_year as short,",
				"          expiration_month as short,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> item",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tenantheirarchydetail",
				"inventorymain derive(transaction_id = toInteger($transaction_id),",
				"          stock_type_id = 1) ~> derivecolumns",
				"jointhtd select(mapColumn(",
				"          import_history_id = importhistory@id,",
				"          business_unit_id,",
				"          organization_id,",
				"          tenant_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectimporthistory",
				"derivecolumns, selectimporthistory join(transaction_id == import_history_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinimporthistory",
				"joinimporthistory, selectlocations join({Location ID} == location_code",
				"     && selectimporthistory@organization_id == selectlocations@organization_id",
				"     && selectimporthistory@business_unit_id == selectlocations@business_unit_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinlocations",
				"locations select(mapColumn(",
				"          location_id = id,",
				"          location_code,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocations",
				"item select(mapColumn(",
				"          item_id = id,",
				"          item_code,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> itemselect",
				"joinlocations, itemselect join({Item ID} == item_code",
				"     && selectimporthistory@business_unit_id == itemselect@business_unit_id",
				"     && selectimporthistory@organization_id == itemselect@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinitem",
				"importhistory, filterburecords join(business_unit_id == tenantheirarchydetail@id",
				"     && organization_id == parent_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> jointhtd",
				"tenantheirarchydetail filter(tenant_hierarchy_type==3) ~> filterburecords",
				"joinitem sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          item_id as integer,",
				"          location_id as integer,",
				"          on_hand_stock_date as date,",
				"          on_hand_stock_quantity as float,",
				"          reserved_on_hold_stock_ as float,",
				"          available_stock as float,",
				"          lot_id as string,",
				"          on_order_due_date as date,",
				"          on_order_quantity_ as float,",
				"          purchase_order_status as float,",
				"          on_order_supplier_shipping_date as date,",
				"          on_order_promised_delivery_date as date,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          stock_type_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          item_id,",
				"          location_id,",
				"          on_hand_stock_date = {Stock Date},",
				"          on_hand_stock_quantity = {Stock Quantity},",
				"          reserved_on_hold_stock_ = {Reserved Quantity},",
				"          available_stock = {Available Quantity},",
				"          lot_id = {On Order ID},",
				"          on_order_due_date = {On Order Due Date},",
				"          on_order_supplier_shipping_date = {On Order Supplier Shipping Date},",
				"          on_order_promised_delivery_date = {On Order Promised Delivery Date},",
				"          tenant_id,",
				"          organization_id,",
				"          business_unit_id = selectimporthistory@business_unit_id,",
				"          stock_type_id",
				"     )) ~> sinkinventory"
			]
		}
	}
}