{
	"name": "df_inventory",
	"properties": {
		"folder": {
			"name": "main"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "INVENTORY_RAW",
						"type": "DatasetReference"
					},
					"name": "inventory"
				},
				{
					"dataset": {
						"referenceName": "item",
						"type": "DatasetReference"
					},
					"name": "ItemMaster"
				},
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "LocationMaster"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "TenantHeirarchyTable"
				},
				{
					"dataset": {
						"referenceName": "enum_types",
						"type": "DatasetReference"
					},
					"name": "EnumType"
				},
				{
					"dataset": {
						"referenceName": "enum_values",
						"type": "DatasetReference"
					},
					"name": "EnumValues"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "inventory",
						"type": "DatasetReference"
					},
					"name": "Write2Inventory"
				}
			],
			"transformations": [
				{
					"name": "THTSelected"
				},
				{
					"name": "LMSelected"
				},
				{
					"name": "IMSelected"
				},
				{
					"name": "DeriveAttributes"
				},
				{
					"name": "JoinTenantHeirarchy"
				},
				{
					"name": "JoinItemMaster"
				},
				{
					"name": "JoinLocationMaster"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "FilterStockType"
				},
				{
					"name": "JoinEnumValues"
				},
				{
					"name": "JoinStockTypeEnum"
				},
				{
					"name": "select1"
				},
				{
					"name": "FilterBU"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Item ID} as string,",
				"          {Location ID} as string,",
				"          {On Hand Stock Date} as date,",
				"          {On Hand Stock Quantity} as float,",
				"          {Reserved On Hold Stock} as float,",
				"          {Available Stock} as float,",
				"          {Lot ID} as string,",
				"          {On Order Due Date} as date,",
				"          {On Order Quantity} as float,",
				"          {Purchase Order Status} as float,",
				"          {On Order Supplier Shipping Date} as date,",
				"          {On Order Promised Delivery Date} as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false,",
				"     rowUrlColumn: 'file_name') ~> inventory",
				"source(output(",
				"          id as integer,",
				"          item_code as string,",
				"          description as string,",
				"          short_description as string,",
				"          department as string,",
				"          sub_department as string,",
				"          class as string,",
				"          sub_class as string,",
				"          style as string,",
				"          color as string,",
				"          size as string,",
				"          size_second as string,",
				"          sku_lifecycle_status as integer,",
				"          product_division as string,",
				"          product_family as string,",
				"          measurement_unit as string,",
				"          unit_cost as float,",
				"          unit_volume as float,",
				"          unit_weight as float,",
				"          unit_cube as float,",
				"          units_per_pallet as float,",
				"          uom_conversion_factor as float,",
				"          distribution_channel as string,",
				"          item_handling_type as string,",
				"          item_unit_price as float,",
				"          minimum_sales_qty as float,",
				"          birth_year as short,",
				"          birth_month as short,",
				"          expiration_year as short,",
				"          expiration_month as short,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ItemMaster",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as decimal(0,0),",
				"          latitude as decimal(0,0),",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LocationMaster",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TenantHeirarchyTable",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EnumType",
				"source(output(",
				"          id as integer,",
				"          enum_type_id as integer,",
				"          value_id as integer,",
				"          value as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EnumValues",
				"FilterBU select(mapColumn(",
				"          business_unit_id = id,",
				"          tenant_hierarchy_type,",
				"          name,",
				"          tenant_id,",
				"          organization_id = parent_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> THTSelected",
				"LocationMaster select(mapColumn(",
				"          location_id = id,",
				"          location_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LMSelected",
				"ItemMaster select(mapColumn(",
				"          item_id = id,",
				"          item_code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> IMSelected",
				"inventory derive(business_unit_name = split(split(file_name,'/')[4],'_')[1],",
				"          stock_type = 'ON_HAND') ~> DeriveAttributes",
				"DeriveAttributes, THTSelected join(business_unit_name == name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTenantHeirarchy",
				"JoinTenantHeirarchy, IMSelected join({Item ID} == item_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinItemMaster",
				"JoinItemMaster, LMSelected join({Location ID} == location_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLocationMaster",
				"select1 alterRow(upsertIf(true())) ~> AlterRow1",
				"EnumType filter(name==\"stock_type\") ~> FilterStockType",
				"FilterStockType, EnumValues join(EnumType@id == enum_type_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinEnumValues",
				"JoinLocationMaster, JoinEnumValues join(stock_type == value,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStockTypeEnum",
				"JoinStockTypeEnum select(mapColumn(",
				"          {Item ID},",
				"          {Location ID},",
				"          {On Hand Stock Date},",
				"          {On Hand Stock Quantity},",
				"          {Reserved On Hold Stock},",
				"          {Available Stock},",
				"          {Lot ID},",
				"          {On Order Due Date},",
				"          {On Order Quantity},",
				"          {Purchase Order Status},",
				"          {On Order Supplier Shipping Date},",
				"          {On Order Promised Delivery Date},",
				"          file_name,",
				"          business_unit_name,",
				"          stock_type,",
				"          business_unit_id,",
				"          tenant_hierarchy_type,",
				"          name = THTSelected@name,",
				"          tenant_id,",
				"          organization_id,",
				"          item_id,",
				"          item_code,",
				"          location_id,",
				"          location_code,",
				"          name = EnumType@name,",
				"          created_date = EnumType@created_date,",
				"          updated_date = EnumType@updated_date,",
				"          enum_type_id,",
				"          value_id,",
				"          value,",
				"          created_date = EnumValues@created_date,",
				"          updated_date = EnumValues@updated_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"TenantHeirarchyTable filter(tenant_hierarchy_type==3) ~> FilterBU",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          item_id as integer,",
				"          location_id as integer,",
				"          on_hand_stock_date as date,",
				"          on_hand_stock_quantity as float,",
				"          reserved_on_hold_stock_ as float,",
				"          available_stock as float,",
				"          lot_id as string,",
				"          on_order_due_date as date,",
				"          on_order_quantity_ as float,",
				"          purchase_order_status as float,",
				"          on_order_supplier_shipping_date as date,",
				"          on_order_promised_delivery_date as date,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          stock_type_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['item_id','location_id','on_hand_stock_date'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          item_id,",
				"          location_id,",
				"          on_hand_stock_date = {On Hand Stock Date},",
				"          on_hand_stock_quantity = {On Hand Stock Quantity},",
				"          reserved_on_hold_stock_ = {Reserved On Hold Stock},",
				"          available_stock = {Available Stock},",
				"          lot_id = {Lot ID},",
				"          on_order_due_date = {On Order Due Date},",
				"          on_order_quantity_ = {On Order Quantity},",
				"          purchase_order_status = {Purchase Order Status},",
				"          on_order_supplier_shipping_date = {On Order Supplier Shipping Date},",
				"          on_order_promised_delivery_date = {On Order Promised Delivery Date},",
				"          tenant_id,",
				"          organization_id,",
				"          business_unit_id,",
				"          stock_type_id = value_id",
				"     )) ~> Write2Inventory"
			]
		}
	}
}