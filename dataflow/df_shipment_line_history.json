{
	"name": "df_shipment_line_history",
	"properties": {
		"folder": {
			"name": "main"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SHIPMENT_HISTORY_RAW",
						"type": "DatasetReference"
					},
					"name": "shipmenthistoryraw"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "tenantheirarchytable"
				},
				{
					"dataset": {
						"referenceName": "order_line_history",
						"type": "DatasetReference"
					},
					"name": "orderlinehistory"
				},
				{
					"dataset": {
						"referenceName": "shipment_history",
						"type": "DatasetReference"
					},
					"name": "shipmenthistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "shipment_line_history",
						"type": "DatasetReference"
					},
					"name": "ShipmentLineHistory"
				}
			],
			"transformations": [
				{
					"name": "derivebusinessunitname"
				},
				{
					"name": "FilterBusinessUnit"
				},
				{
					"name": "SelectTHD"
				},
				{
					"name": "JoinTHDT"
				},
				{
					"name": "SelectOLH"
				},
				{
					"name": "JoinSLH2OLH"
				},
				{
					"name": "SelectSH"
				},
				{
					"name": "JoinSH2SLH"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Shipment ID} as string,",
				"          {Order Line ID} as string,",
				"          {Location ID} as string,",
				"          {Carrier Name} as string,",
				"          Mode as string,",
				"          {Total Units} as float,",
				"          {Total Shipment Weight} as float,",
				"          {Total Shipment Volume} as float,",
				"          {Total Shipment Cost} as float,",
				"          {Total Shipment Value} as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false,",
				"     rowUrlColumn: 'file_name') ~> shipmenthistoryraw",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tenantheirarchytable",
				"source(output(",
				"          order_id as integer,",
				"          order_line_code as string,",
				"          item_code as string,",
				"          item_name as string,",
				"          item_description as string,",
				"          order_quantity as float,",
				"          ship_quantity as float,",
				"          line_status as string,",
				"          item_price as float,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderlinehistory",
				"source(output(",
				"          id as integer,",
				"          shipment_code as string,",
				"          order_code as string,",
				"          delivery_partner_name as string,",
				"          service_level as string,",
				"          status as string,",
				"          shipment_date as timestamp,",
				"          total_units as float,",
				"          total_weight as float,",
				"          total_volume as float,",
				"          total_cost as float,",
				"          business_unit_id as string,",
				"          organization_id as string,",
				"          import_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> shipmenthistory",
				"shipmenthistoryraw derive(business_unit_name = split(split(file_name,'/')[4],\"_\")[2]) ~> derivebusinessunitname",
				"tenantheirarchytable filter(tenant_hierarchy_type==3) ~> FilterBusinessUnit",
				"FilterBusinessUnit select(mapColumn(",
				"          business_unit_id = id,",
				"          name,",
				"          tenant_id,",
				"          organization_id = parent_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTHD",
				"derivebusinessunitname, SelectTHD join(business_unit_name == name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTHDT",
				"orderlinehistory select(mapColumn(",
				"          order_id,",
				"          order_line_code,",
				"          item_code,",
				"          item_name,",
				"          ship_quantity,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOLH",
				"JoinSH2SLH, SelectOLH join({Order Line ID} == order_line_code",
				"     && SelectTHD@business_unit_id == SelectOLH@business_unit_id",
				"     && SelectTHD@organization_id == SelectOLH@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSLH2OLH",
				"shipmenthistory select(mapColumn(",
				"          shipment_id = id,",
				"          shipment_code,",
				"          order_code,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSH",
				"JoinTHDT, SelectSH join({Shipment ID} == shipment_code",
				"     && SelectTHD@business_unit_id == SelectSH@business_unit_id",
				"     && SelectTHD@organization_id == SelectSH@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSH2SLH",
				"JoinSLH2OLH alterRow(upsertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          shipment_id as integer,",
				"          shipment_line_code as string,",
				"          order_code as string,",
				"          order_line_code as string,",
				"          item_code as string,",
				"          item_name as string,",
				"          units as float,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['order_code','order_line_code'],",
				"     format: 'table',",
				"     batchSize: 4000000,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          shipment_id,",
				"          shipment_line_code = shipment_code,",
				"          order_code,",
				"          order_line_code,",
				"          item_code,",
				"          item_name,",
				"          units = {Total Units},",
				"          business_unit_id = SelectOLH@business_unit_id,",
				"          organization_id = SelectTHD@organization_id",
				"     )) ~> ShipmentLineHistory"
			]
		}
	}
}