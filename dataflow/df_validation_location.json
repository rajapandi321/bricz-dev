{
	"name": "df_validation_location",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "locations"
				},
				{
					"dataset": {
						"referenceName": "LOCATION_UX_STAGING",
						"type": "DatasetReference"
					},
					"name": "locationstagingux"
				},
				{
					"dataset": {
						"referenceName": "location_type",
						"type": "DatasetReference"
					},
					"name": "locationtype"
				},
				{
					"dataset": {
						"referenceName": "importhistory",
						"type": "DatasetReference"
					},
					"name": "importhistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "LocationsMain",
						"type": "DatasetReference"
					},
					"name": "ValidLocations"
				},
				{
					"dataset": {
						"referenceName": "FailedRowsLocation",
						"type": "DatasetReference"
					},
					"name": "failedrows"
				}
			],
			"transformations": [
				{
					"name": "validations"
				},
				{
					"name": "reverserename"
				},
				{
					"name": "deriveerrors"
				},
				{
					"name": "selectmainfields"
				},
				{
					"name": "aggregateerrors"
				},
				{
					"name": "joinaggregaterror"
				},
				{
					"name": "splitvalidatedrows"
				},
				{
					"name": "derivedfilename"
				},
				{
					"name": "newchangenameforassert"
				},
				{
					"name": "addcolpresence"
				},
				{
					"name": "selectlocation"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "filtertransaction"
				},
				{
					"name": "selectimporthistory"
				},
				{
					"name": "appendrecordid"
				},
				{
					"name": "detectduplicates"
				},
				{
					"name": "selectlocationtypes"
				},
				{
					"name": "joinbuorglocations"
				},
				{
					"name": "filterrowswithvalidationerrors"
				},
				{
					"name": "joinlocationstable"
				},
				{
					"name": "filteremptyrows"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_path as string ('/DEV/Upload/Location/36.xlsx'),",
				"     transaction_id as string ('36')",
				"}",
				"source(output(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as double,",
				"          latitude as double,",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          units_per_hour as float,",
				"          max_fte_regular_hours as float,",
				"          min_fte_regular_hours as float,",
				"          max_temp_regular_hours as float,",
				"          min_temp_regular_hours as float,",
				"          max_fte_overtime_hours as float,",
				"          max_temp_overtime_hours as float,",
				"          regular_fte_wage as float,",
				"          regular_temp_wage as float,",
				"          overtime_fte_wage as float,",
				"          overtime_temp_wage as float,",
				"          fte_staff_count as integer,",
				"          temp_staff_count as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locations",
				"source(output(",
				"          {Location ID*} as string,",
				"          {Location Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Country as string,",
				"          Longitude as string,",
				"          Latitude as string,",
				"          {Location Status} as string,",
				"          {Location Type} as string,",
				"          {Daily Throughput} as string,",
				"          {Storage Capacity} as string,",
				"          {Inbound Handling Cost} as string,",
				"          {Outbound Handling Cost} as string,",
				"          {Inbound Processing Time} as string,",
				"          {Outbound Processing Time} as string,",
				"          {Transfer Inbound Processing Time} as string,",
				"          {Transfer Outbound Processing Time} as string,",
				"          {Transfer Inbound Handling Cost} as string,",
				"          {Transfer Outbound Handling Cost} as string,",
				"          {Units per Hour} as string,",
				"          {Max FTE Regular Hours} as string,",
				"          {Min FTE Regular Hours} as string,",
				"          {Max Temp Regular Hours} as string,",
				"          {Min Temp Regular Hours} as string,",
				"          {Max FTE Overtime Hours} as string,",
				"          {Regular FTE Wage} as string,",
				"          {Regular Temp Wage} as string,",
				"          {Overtime FTE Wage} as string,",
				"          {Overtime Temp Wage} as string,",
				"          {FTE Staff Count} as string,",
				"          {Temp Staff Count} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($file_path)]) ~> locationstagingux",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          description as string,",
				"          created_date as date,",
				"          updated_date as date,",
				"          display_icon as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locationtype",
				"source(output(",
				"          id as integer,",
				"          original_file_name as string,",
				"          user_id as string,",
				"          status_enum_value_id as integer,",
				"          processed_time as timestamp,",
				"          errors as string,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> importhistory",
				"filteremptyrows, selectlocationtypes, selectlocation assert(expectTrue(isNull(newchangenameforassert@presence), false, 'checkrecordexists', null, 'Record Already Exists In DB'),",
				"     expectExists(Location_Type == name, false, 'checklocationtype', null, 'Location Type Not Found'),",
				"     expectTrue(numericalfieldintegrity, false, 'numericalintegrity', null, 'Numerical fields contain non numeric values'),",
				"     expectUnique(Location_ID, false, 'duplicateddata', null, 'Duplicate Records Found In The Upload')) ~> validations",
				"validations select(mapColumn(",
				"          {Location ID*} = Location_ID,",
				"          {Location Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Country,",
				"          Longitude,",
				"          Latitude,",
				"          {Location Status},",
				"          {Location Type} = Location_Type,",
				"          {Daily Throughput},",
				"          {Storage Capacity},",
				"          {Inbound Handling Cost},",
				"          {Outbound Handling Cost},",
				"          {Inbound Processing Time},",
				"          {Outbound Processing Time},",
				"          {Transfer Inbound Processing Time},",
				"          {Transfer Outbound Processing Time},",
				"          {Transfer Inbound Handling Cost},",
				"          {Transfer Outbound Handling Cost},",
				"          {Units per Hour},",
				"          {Max FTE Regular Hours},",
				"          {Min FTE Regular Hours},",
				"          {Max Temp Regular Hours},",
				"          {Min Temp Regular Hours},",
				"          {Regular FTE Wage},",
				"          {Regular Temp Wage},",
				"          {Overtime FTE Wage},",
				"          {Overtime Temp Wage},",
				"          {FTE Staff Count},",
				"          {Temp Staff Count},",
				"          file_name,",
				"          record_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> reverserename",
				"reverserename derive(validation_errors = assertErrorMessages(),",
				"          transaction_id = toInteger($transaction_id),",
				"          sink_file_name = replace(file_name,'.xlsx','.txt')) ~> deriveerrors",
				"joinaggregaterror select(mapColumn(",
				"          {Location ID*},",
				"          {Location Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Country,",
				"          Longitude,",
				"          Latitude,",
				"          {Location Status},",
				"          {Location Type},",
				"          {Daily Throughput},",
				"          {Storage Capacity},",
				"          {Inbound Handling Cost},",
				"          {Outbound Handling Cost},",
				"          {Inbound Processing Time},",
				"          {Outbound Processing Time},",
				"          {Transfer Inbound Processing Time},",
				"          {Transfer Outbound Processing Time},",
				"          {Transfer Inbound Handling Cost},",
				"          {Transfer Outbound Handling Cost},",
				"          {Units per Hour},",
				"          {Max FTE Regular Hours},",
				"          {Min FTE Regular Hours},",
				"          {Max Temp Regular Hours},",
				"          {Min Temp Regular Hours},",
				"          {Regular FTE Wage},",
				"          {Regular Temp Wage},",
				"          {Overtime FTE Wage},",
				"          {Overtime Temp Wage},",
				"          {FTE Staff Count},",
				"          {Temp Staff Count},",
				"          file_name = reverserename@file_name,",
				"          validation_errors,",
				"          transaction_id,",
				"          sink_file_name,",
				"          errors_count,",
				"          record_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectmainfields",
				"deriveerrors aggregate(groupBy(file_name),",
				"     errors_count = countIf(not(isNull(validation_errors)))) ~> aggregateerrors",
				"deriveerrors, aggregateerrors join(reverserename@file_name == aggregateerrors@file_name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinaggregaterror",
				"selectmainfields split(errors_count==0,",
				"     disjoint: false) ~> splitvalidatedrows@(validrows, validationfailedrows)",
				"filterrowswithvalidationerrors derive(failed_file_name = replace(replace($file_path,'/Upload/','/FailedTransactions/'),'.xlsx','.json'),",
				"          type = 'error',",
				"          message = concat('record number ',toString(record_id),' has following errors ',toString(validation_errors))) ~> derivedfilename",
				"derivedColumn select(mapColumn(",
				"          Location_ID = {Location ID*},",
				"          {Location Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Country,",
				"          Longitude,",
				"          Latitude,",
				"          {Location Status},",
				"          Location_Type = {Location Type},",
				"          {Daily Throughput},",
				"          {Storage Capacity},",
				"          {Inbound Handling Cost},",
				"          {Outbound Handling Cost},",
				"          {Inbound Processing Time},",
				"          {Outbound Processing Time},",
				"          {Transfer Inbound Processing Time},",
				"          {Transfer Outbound Processing Time},",
				"          {Transfer Inbound Handling Cost},",
				"          {Transfer Outbound Handling Cost},",
				"          {Units per Hour},",
				"          {Max FTE Regular Hours},",
				"          {Min FTE Regular Hours},",
				"          {Max Temp Regular Hours},",
				"          {Min Temp Regular Hours},",
				"          {Max FTE Overtime Hours},",
				"          {Regular FTE Wage},",
				"          {Regular Temp Wage},",
				"          {Overtime FTE Wage},",
				"          {Overtime Temp Wage},",
				"          {FTE Staff Count},",
				"          {Temp Staff Count},",
				"          file_name,",
				"          numericalfieldintegrity,",
				"          nonduplicatedrow,",
				"          record_id,",
				"          presence",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> newchangenameforassert",
				"joinbuorglocations derive(presence = 'true') ~> addcolpresence",
				"addcolpresence select(mapColumn(",
				"          location_code,",
				"          presence",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocation",
				"joinlocationstable derive(file_name = $file_path,",
				"          numericalfieldintegrity = iif(isNull({Daily Throughput}),true(),not(isNull(toFloat({Daily Throughput})))) && iif(isNull({Storage Capacity}),true(),not(isNull(toFloat({Storage Capacity})))) && iif(isNull({Inbound Handling Cost}),true(),not(isNull(toFloat({Inbound Handling Cost})))) && iif(isNull({Outbound Handling Cost}),true(),not(isNull(toFloat({Outbound Handling Cost})))) && iif(isNull({Transfer Inbound Handling Cost}),true(),not(isNull(toFloat({Transfer Inbound Handling Cost})))) && iif(isNull({Transfer Outbound Handling Cost}),true(),not(isNull(toFloat({Transfer Outbound Handling Cost})))) && iif(isNull({Units per Hour}),true(),not(isNull(toFloat({Units per Hour})))) && iif(isNull({Min FTE Regular Hours}),true(),not(isNull(toFloat({Min FTE Regular Hours})))) && iif(isNull({Max FTE Regular Hours}),true(),not(isNull(toFloat({Max FTE Regular Hours})))) && iif(isNull({Min Temp Regular Hours}),true(),not(isNull(toFloat({Min Temp Regular Hours})))) && iif(isNull({Max Temp Regular Hours}),true(),not(isNull(toFloat({Max Temp Regular Hours})))) && iif(isNull({Max FTE Overtime Hours}),true(),not(isNull(toFloat({Max FTE Overtime Hours})))) && iif(isNull({Regular FTE Wage}),true(),not(isNull(toFloat({Regular FTE Wage})))) && iif(isNull({Regular Temp Wage}),true(),not(isNull(toFloat({Regular Temp Wage})))) && iif(isNull({Overtime FTE Wage}),true(),not(isNull(toFloat({Overtime FTE Wage})))) && iif(isNull({Overtime Temp Wage}),true(),not(isNull(toFloat({Overtime Temp Wage})))) && iif(isNull({FTE Staff Count}),true(),not(isNull(toFloat({FTE Staff Count})))) && iif(isNull({Temp Staff Count}),true(),not(isNull(toFloat({Temp Staff Count}))))) ~> derivedColumn",
				"importhistory filter(id == toInteger($transaction_id)) ~> filtertransaction",
				"filtertransaction select(mapColumn(",
				"          id,",
				"          original_file_name,",
				"          user_id,",
				"          status_enum_value_id,",
				"          processed_time,",
				"          errors,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectimporthistory",
				"locationstagingux keyGenerate(output(record_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> appendrecordid",
				"appendrecordid window(over({Location ID*}),",
				"     asc(record_id, true),",
				"     nonduplicatedrow = rowNumber() == 1) ~> detectduplicates",
				"locationtype select(mapColumn(",
				"          id,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocationtypes",
				"locations, selectimporthistory join(locations@business_unit_id == selectimporthistory@business_unit_id",
				"     && locations@organization_id == selectimporthistory@organization_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinbuorglocations",
				"splitvalidatedrows@validationfailedrows filter(not(isNull(validation_errors))) ~> filterrowswithvalidationerrors",
				"detectduplicates, selectlocation join({Location ID*} == location_code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinlocationstable",
				"newchangenameforassert filter(not(isNull(Location_ID)) || not(isNull({Location Name})) || not(isNull(Address)) || not(isNull(City)) || not(isNull(State)) || not(isNull(Zip)) || not(isNull(Longitude)) || not(isNull(Latitude)) || not(isNull({Location Status})) || not(isNull(Location_Type)) || not(isNull({Daily Throughput})) || not(isNull({Storage Capacity})) || not(isNull({Inbound Handling Cost})) || not(isNull({Outbound Handling Cost})) || not(isNull({Inbound Processing Time})) || not(isNull({Outbound Processing Time})) || not(isNull({Transfer Inbound Processing Time})) || not(isNull({Transfer Outbound Processing Time})) || not(isNull({Transfer Inbound Handling Cost})) || not(isNull({Units per Hour})) || not(isNull({Max FTE Regular Hours})) || not(isNull({Min FTE Regular Hours})) || not(isNull({Max Temp Regular Hours})) || not(isNull({Min Temp Regular Hours})) || not(isNull({Max FTE Overtime Hours})) || not(isNull({Regular FTE Wage})) || not(isNull({Regular Temp Wage})) || not(isNull({Overtime FTE Wage})) || not(isNull({Overtime Temp Wage})) || not(isNull({FTE Staff Count})) || not(isNull({Temp Staff Count}))) ~> filteremptyrows",
				"splitvalidatedrows@validrows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Location ID*} as string,",
				"          {Location Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Country as string,",
				"          Longitude as string,",
				"          Latitude as string,",
				"          {Location Status} as string,",
				"          {Location Type} as string,",
				"          {Daily Throughput} as string,",
				"          {Storage Capacity} as string,",
				"          {Inbound Handling Cost} as string,",
				"          {Outbound Handling Cost} as string,",
				"          {Inbound Processing Time} as string,",
				"          {Outbound Processing Time} as string,",
				"          {Transfer Inbound Processing Time} as string,",
				"          {Transfer Outbound Processing Time} as string,",
				"          {Transfer Inbound Handling Cost} as string,",
				"          {Transfer Outbound Handling Cost} as string,",
				"          {Units per Hour} as string,",
				"          {Max FTE Regular Hours} as string,",
				"          {Min FTE Regular Hours} as string,",
				"          {Max Temp Regular Hours} as string,",
				"          {Min Temp Regular Hours} as string,",
				"          {Regular FTE Wage} as string,",
				"          {Regular Temp Wage} as string,",
				"          {Overtime FTE Wage} as string,",
				"          {Overtime Temp Wage} as string,",
				"          {FTE Staff Count} as string,",
				"          {Temp Staff Count} as string",
				"     ),",
				"     rowUrlColumn:'sink_file_name',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          {Location ID*},",
				"          {Location Name},",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Country,",
				"          Longitude,",
				"          Latitude,",
				"          {Location Status},",
				"          {Location Type},",
				"          {Daily Throughput},",
				"          {Storage Capacity},",
				"          {Inbound Handling Cost},",
				"          {Outbound Handling Cost},",
				"          {Inbound Processing Time},",
				"          {Outbound Processing Time},",
				"          {Transfer Inbound Processing Time},",
				"          {Transfer Outbound Processing Time},",
				"          {Transfer Inbound Handling Cost},",
				"          {Transfer Outbound Handling Cost},",
				"          {Units per Hour},",
				"          {Max FTE Regular Hours},",
				"          {Min FTE Regular Hours},",
				"          {Max Temp Regular Hours},",
				"          {Min Temp Regular Hours},",
				"          {Regular FTE Wage},",
				"          {Regular Temp Wage},",
				"          {Overtime FTE Wage},",
				"          {Overtime Temp Wage},",
				"          {FTE Staff Count},",
				"          {Temp Staff Count}",
				"     )) ~> ValidLocations",
				"derivedfilename sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowUrlColumn:'failed_file_name',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          type,",
				"          message",
				"     )) ~> failedrows"
			]
		}
	}
}