{
	"name": "df_transform_location_ux",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "LocationsMain",
						"type": "DatasetReference"
					},
					"name": "locationmain"
				},
				{
					"dataset": {
						"referenceName": "importhistory",
						"type": "DatasetReference"
					},
					"name": "importhistory"
				},
				{
					"dataset": {
						"referenceName": "location_type",
						"type": "DatasetReference"
					},
					"name": "locationtype"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "tenantheirarchydetail"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "locations",
						"type": "DatasetReference"
					},
					"name": "sinklocation"
				}
			],
			"transformations": [
				{
					"name": "derivecolumns"
				},
				{
					"name": "selectimporthistory"
				},
				{
					"name": "joinimporthistory"
				},
				{
					"name": "joinlocations"
				},
				{
					"name": "selectlocationtypes"
				},
				{
					"name": "joinTHTD"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_path as string ('/DEV/Upload/Location/198.txt'),",
				"     transaction_id as string ('198')",
				"}",
				"source(output(",
				"          {Location ID*} as string,",
				"          {Location Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          Country as string,",
				"          Longitude as double,",
				"          Latitude as double,",
				"          {Location Status} as string,",
				"          {Location Type} as string,",
				"          {Daily Throughput} as float,",
				"          {Storage Capacity} as float,",
				"          {Inbound Handling Cost} as float,",
				"          {Outbound Handling Cost} as float,",
				"          {Inbound Processing Time} as decimal(10,0),",
				"          {Outbound Processing Time} as decimal(10,0),",
				"          {Transfer Inbound Processing Time} as double,",
				"          {Transfer Outbound Processing Time} as double,",
				"          {Transfer Inbound Handling Cost} as double,",
				"          {Transfer Outbound Handling Cost} as double,",
				"          {Units per Hour} as float,",
				"          {Max FTE Regular Hours} as float,",
				"          {Min FTE Regular Hours} as float,",
				"          {Max Temp Regular Hours} as float,",
				"          {Min Temp Regular Hours} as float,",
				"          {Regular FTE Wage} as float,",
				"          {Regular Temp Wage} as float,",
				"          {Overtime FTE Wage} as float,",
				"          {Overtime Temp Wage} as float,",
				"          {FTE Staff Count} as integer,",
				"          {Temp Staff Count} as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'file_name',",
				"     wildcardPaths:[($file_path)]) ~> locationmain",
				"source(output(",
				"          id as integer,",
				"          original_file_name as string,",
				"          user_id as string,",
				"          status_enum_value_id as integer,",
				"          processed_time as timestamp,",
				"          errors as string,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> importhistory",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          description as string,",
				"          created_date as date,",
				"          updated_date as date,",
				"          display_icon as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locationtype",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tenantheirarchydetail",
				"locationmain derive(transaction_id = toInteger($transaction_id)) ~> derivecolumns",
				"joinTHTD select(mapColumn(",
				"          import_history_id = importhistory@id,",
				"          business_unit_id,",
				"          organization_id,",
				"          tenant_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectimporthistory",
				"derivecolumns, selectimporthistory join(transaction_id == import_history_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinimporthistory",
				"joinimporthistory, selectlocationtypes join({Location Type} == location_type_name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinlocations",
				"locationtype select(mapColumn(",
				"          location_type_id = id,",
				"          location_type_name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectlocationtypes",
				"importhistory, tenantheirarchydetail join(business_unit_id == tenantheirarchydetail@id",
				"     && organization_id == parent_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTHTD",
				"joinlocations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          location_code as string,",
				"          name as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          country as string,",
				"          sub_type as string,",
				"          delivery_partners as string,",
				"          throughput as float,",
				"          capacity as float,",
				"          special_information as string,",
				"          holding_cost as float,",
				"          inbound_handling_cost as float,",
				"          outbound_handling_cost as float,",
				"          longitude as double,",
				"          latitude as double,",
				"          updated_date as date,",
				"          created_date as date,",
				"          status as string,",
				"          inbound_processing_time as decimal(0,0),",
				"          outbound_processing_time as decimal(0,0),",
				"          type as integer,",
				"          transfer_inbound_processing_time as double,",
				"          transfer_outbound_processing_time as double,",
				"          transfer_inbound_handling_cost as double,",
				"          transfer_outbound_handling_cost as double,",
				"          tenant_id as string,",
				"          organization_id as string,",
				"          business_unit_id as string,",
				"          units_per_hour as float,",
				"          max_fte_regular_hours as float,",
				"          min_fte_regular_hours as float,",
				"          max_temp_regular_hours as float,",
				"          min_temp_regular_hours as float,",
				"          max_fte_overtime_hours as float,",
				"          max_temp_overtime_hours as float,",
				"          regular_fte_wage as float,",
				"          regular_temp_wage as float,",
				"          overtime_fte_wage as float,",
				"          overtime_temp_wage as float,",
				"          fte_staff_count as integer,",
				"          temp_staff_count as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          location_code = {Location ID*},",
				"          name = {Location Name},",
				"          address = Address,",
				"          city = City,",
				"          state = State,",
				"          zip = Zip,",
				"          country = Country,",
				"          throughput = {Daily Throughput},",
				"          capacity = {Storage Capacity},",
				"          inbound_handling_cost = {Inbound Handling Cost},",
				"          outbound_handling_cost = {Outbound Handling Cost},",
				"          longitude = Longitude,",
				"          latitude = Latitude,",
				"          status = {Location Status},",
				"          inbound_processing_time = {Inbound Processing Time},",
				"          outbound_processing_time = {Outbound Processing Time},",
				"          type = location_type_id,",
				"          transfer_inbound_processing_time = {Transfer Inbound Processing Time},",
				"          transfer_outbound_processing_time = {Transfer Outbound Processing Time},",
				"          transfer_inbound_handling_cost = {Transfer Inbound Handling Cost},",
				"          transfer_outbound_handling_cost = {Transfer Outbound Handling Cost},",
				"          tenant_id,",
				"          organization_id,",
				"          business_unit_id,",
				"          units_per_hour = {Units per Hour},",
				"          max_fte_regular_hours = {Max FTE Regular Hours},",
				"          min_fte_regular_hours = {Min FTE Regular Hours},",
				"          max_temp_regular_hours = {Max Temp Regular Hours},",
				"          min_temp_regular_hours = {Min Temp Regular Hours},",
				"          max_fte_overtime_hours = {Max FTE Regular Hours},",
				"          max_temp_overtime_hours = {Max FTE Regular Hours},",
				"          regular_fte_wage = {Regular FTE Wage},",
				"          regular_temp_wage = {Regular Temp Wage},",
				"          overtime_fte_wage = {Overtime FTE Wage},",
				"          overtime_temp_wage = {Overtime Temp Wage},",
				"          fte_staff_count = {FTE Staff Count},",
				"          temp_staff_count = {Temp Staff Count}",
				"     )) ~> sinklocation"
			]
		}
	}
}