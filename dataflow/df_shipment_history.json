{
	"name": "df_shipment_history",
	"properties": {
		"folder": {
			"name": "main"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SHIPMENT_HISTORY_RAW",
						"type": "DatasetReference"
					},
					"name": "shipmenthistoryraw"
				},
				{
					"dataset": {
						"referenceName": "tenant_heirarchy_table",
						"type": "DatasetReference"
					},
					"name": "tenantheirarchydetail"
				},
				{
					"dataset": {
						"referenceName": "order_line_history",
						"type": "DatasetReference"
					},
					"name": "orderlinetable"
				},
				{
					"dataset": {
						"referenceName": "order_history",
						"type": "DatasetReference"
					},
					"name": "orderhistory"
				},
				{
					"dataset": {
						"referenceName": "order_status_history",
						"type": "DatasetReference"
					},
					"name": "orderstatushistory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "shipment_history",
						"type": "DatasetReference"
					},
					"name": "ShipmentHistory"
				}
			],
			"transformations": [
				{
					"name": "derivebusinessunitname"
				},
				{
					"name": "selectthtd"
				},
				{
					"name": "filter1"
				},
				{
					"name": "JoinTHTD"
				},
				{
					"name": "selectorderline"
				},
				{
					"name": "selectorderhistory"
				},
				{
					"name": "JoinOrderLine"
				},
				{
					"name": "JoinOrderHistory"
				},
				{
					"name": "filtershipmentstatus"
				},
				{
					"name": "JoinOrderShipmentStatusHistory"
				},
				{
					"name": "selectshipmentstatus"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "FilterNotNullRows"
				},
				{
					"name": "RemoveDuplicates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Shipment ID} as string,",
				"          {Order Line ID} as string,",
				"          {Location ID} as string,",
				"          {Carrier Name} as string,",
				"          Mode as string,",
				"          {Total Units} as float,",
				"          {Total Shipment Weight} as float,",
				"          {Total Shipment Volume} as float,",
				"          {Total Shipment Cost} as float,",
				"          {Total Shipment Value} as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false,",
				"     rowUrlColumn: 'file_name') ~> shipmenthistoryraw",
				"source(output(",
				"          id as string,",
				"          tenant_hierarchy_type as integer,",
				"          name as string,",
				"          contact_name as string,",
				"          email as string,",
				"          phone as string,",
				"          street_address_1 as string,",
				"          street_address_2 as string,",
				"          city as string,",
				"          state as string,",
				"          zip as integer,",
				"          country as string,",
				"          active as boolean,",
				"          tenant_id as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          parent_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tenantheirarchydetail",
				"source(output(",
				"          order_id as integer,",
				"          order_line_code as string,",
				"          item_code as string,",
				"          item_name as string,",
				"          item_description as string,",
				"          order_quantity as float,",
				"          ship_quantity as float,",
				"          line_status as string,",
				"          item_price as float,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderlinetable",
				"source(output(",
				"          id as integer,",
				"          order_code as string,",
				"          channel as string,",
				"          order_date as timestamp,",
				"          must_ship_by_date as timestamp,",
				"          must_deliver_by_date as timestamp,",
				"          destination_city as string,",
				"          destination_state as string,",
				"          destination_postal_code as string,",
				"          destination_country as string,",
				"          status as string,",
				"          delivery_partner_name as string,",
				"          service_level_name as string,",
				"          fulfillment_service as string,",
				"          total_units as float,",
				"          total_shipping_charge as float,",
				"          total_order_value as float,",
				"          import_date as timestamp,",
				"          organization_id as string,",
				"          business_unit_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderhistory",
				"source(output(",
				"          order_id as integer,",
				"          status as string,",
				"          status_date as timestamp,",
				"          business_unit_id as string,",
				"          organization_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderstatushistory",
				"shipmenthistoryraw derive(business_unit_name = split(split(file_name,'/')[4],\"_\")[2]) ~> derivebusinessunitname",
				"filter1 select(mapColumn(",
				"          business_unit_id = id,",
				"          name,",
				"          tenant_id,",
				"          organization_id = parent_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectthtd",
				"tenantheirarchydetail filter(tenant_hierarchy_type==3) ~> filter1",
				"derivebusinessunitname, selectthtd join(business_unit_name == name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTHTD",
				"orderlinetable select(mapColumn(",
				"          order_id,",
				"          order_line_code,",
				"          line_status,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectorderline",
				"orderhistory select(mapColumn(",
				"          order_id = id,",
				"          order_code,",
				"          order_date,",
				"          service_level_name,",
				"          must_deliver_by_date,",
				"          status,",
				"          import_date,",
				"          organization_id,",
				"          business_unit_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectorderhistory",
				"JoinTHTD, selectorderline join({Order Line ID} == order_line_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOrderLine",
				"JoinOrderLine, selectorderhistory join(selectorderline@order_id == selectorderhistory@order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOrderHistory",
				"orderstatushistory filter(status=='Shipped') ~> filtershipmentstatus",
				"JoinOrderHistory, selectshipmentstatus join(selectorderline@order_id == selectshipmentstatus@order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOrderShipmentStatusHistory",
				"filtershipmentstatus select(mapColumn(",
				"          order_id,",
				"          shipment_date = status_date,",
				"          business_unit_id,",
				"          organization_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectshipmentstatus",
				"RemoveDuplicates alterRow(upsertIf(true())) ~> AlterRow1",
				"JoinOrderShipmentStatusHistory filter(not(isNull({Carrier Name}))&& not(isNull(service_level_name))) ~> FilterNotNullRows",
				"FilterNotNullRows aggregate(groupBy({Shipment ID},",
				"          order_code,",
				"          {Carrier Name},",
				"          service_level_name,",
				"          status,",
				"          shipment_date,",
				"          {Location ID},",
				"          import_date,",
				"          selectthtd@business_unit_id,",
				"          selectthtd@organization_id),",
				"     {Total Units} = toFloat(sum({Total Units})),",
				"          {Total Shipment Weight} = toFloat(avg({Total Shipment Weight})),",
				"          {Total Shipment Volume} = toFloat(avg({Total Shipment Volume})),",
				"          {Total Shipment Cost} = toFloat(sum({Total Shipment Cost}))) ~> RemoveDuplicates",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          shipment_code as string,",
				"          order_code as string,",
				"          delivery_partner_name as string,",
				"          service_level as string,",
				"          status as string,",
				"          shipment_date as timestamp,",
				"          total_units as float,",
				"          total_weight as float,",
				"          total_volume as float,",
				"          total_cost as float,",
				"          business_unit_id as string,",
				"          organization_id as string,",
				"          import_date as timestamp,",
				"          location_code as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['shipment_code'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          shipment_code = {Shipment ID},",
				"          order_code,",
				"          delivery_partner_name = {Carrier Name},",
				"          service_level = service_level_name,",
				"          status,",
				"          shipment_date,",
				"          total_units = {Total Units},",
				"          total_weight = {Total Shipment Weight},",
				"          total_volume = {Total Shipment Volume},",
				"          total_cost = {Total Shipment Cost},",
				"          business_unit_id,",
				"          organization_id,",
				"          import_date,",
				"          location_code = {Location ID}",
				"     )) ~> ShipmentHistory"
			]
		}
	}
}